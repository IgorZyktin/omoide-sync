[project]
name = "omoide-sync"
version = "0.1.0"
description = "CLI tool that synchronizes local storage with Omoide account"
authors = [
    { name = "Igor Zyktin", email = "nicord@yandex.ru" }
]
readme = "README.md"
license = { text = "MIT License" }
requires-python = ">=3.12"
dependencies = [
    "PyYAML >= 6.0.0",
    "pydantic-settings >= 2.3.0",
    "requests >= 2.32.0",
    "selenium >= 4.15.0",
    "loguru >= 0.7.2",
    "omoide-client>=0.3.11",
    "httpx>=0.27.2",
    "typer>=0.13.1",
    "ruff>=0.8.0",
    "python-dateutil>=2.9.0.post0",
]

[project.optional-dependencies]
tests = [
    "ruff >= 0.5.0",
    "mypy >= 1.10.1",
    "types-requests >= 1.10.1",
    "types-PyYAML >= 6.0.12",
]

[project.scripts]
omoide-sync = "omoide_sync:__main__"

[project.urls]
Repository = "https://github.com/IgorZyktin/omoide-sync"
Issues = "https://github.com/IgorZyktin/omoide-sync/issues"

[tool.ruff]
line-length = 100
target-version = "py312"

lint.select = [
    "A",     # flake8-builtins
    "ARG",   # flake8-unused-arguments
    "ASYNC", # flake8-async - starting from version 0.0.270
    "B",     # flake8-bugbear
    "BLE",   # flake8-blind-except
    "C4",    # flake8-comprehensions
    "C90",   # mccabe
    "COM",   # flake8-commas
    "D",     # pydocstyle
    "DTZ",   # flake8-datetimez
    "E",     # pycodestyle
    "EM",    # flake8-errmsg
    "ERA",   # eradicate
    "EXE",   # flake8-executable
    "F",     # Pyflakes
    "FA",    # flake8-future-annotations
    "FBT",   # flake8-boolean-trap
    "G",     # flake8-logging-format
    "I",     # isort
    "ICN",   # flake8-import-conventions
    "INP",   # flake8-no-pep420
    "INT",   # flake8-gettext
    "ISC",   # flake8-implicit-str-concat
    "N",     # pep8-naming
    "PGH",   # pygrep-hooks
    "PIE",   # flake8-pie
    "PL",    # Pylint
    "PLC",   # Convention
    "PLE",   # Error
    "PLR",   # Refactor
    "PLW",   # Warning
    "PT",    # flake8-pytest-style
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RUF",   # Ruff-specific rules
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "T10",   # flake8-debugger
    "T20",   # flake8-print
    "TCH",   # flake8-type-checking
    "TID",   # flake8-tidy-imports
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # pycodestyle
    "YTT",   # flake8-2020
]

lint.ignore = [
    "COM812", # Checks for the absence of trailing commas
    "D104",   # Missing docstring in public package
    "D203",   # 1 blank line required before class docstring
    "D204",   # 1 blank line required after class docstring
    "D213",   # Multi-line docstring summary should start at the second line
    "ISC001", # Checks for implicitly concatenated strings on a single line
    "RUF100", # Unused noqa directive (non-enabled: F401, `F403`)
    "S101",   # Use of assert detected
    "S104",   # Possible binding to all interfaces
    "S105",   # Possible hardcoded password assigned
    "S106",   # Possible hardcoded password assigned
    "S311",   # Standard pseudo-random generators for cryptographic purposes
    "SIM108", # Use ternary operator instead of `if`-`else`-block
    "TRY401", # Redundant exception object included in logging.exception call
]

[tool.ruff.lint.per-file-ignores]
"omoide_sync/tests/*" = [
    "ARG001",  # Unused function argument
    "ARG002",  # Unused method argument
    "D100",    # Missing docstring in public module
    "D103",    # Missing docstring in public function
    "EM101",   # Exception must not use a string literal
    "PLR2004", # Magic value used in comparison
]

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint.isort]
force-single-line = true
force-sort-within-sections = true
order-by-type = true

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
multiline-quotes = "double"
docstring-quotes = "double"

[tool.ruff.lint.pylint]
max-args = 5

[tool.mypy]
disallow_untyped_defs = true
ignore_missing_imports = true
warn_return_any = true
warn_unused_configs = true
exclude = ["^venv"]
plugins = [
    "pydantic.mypy",
]

[[tool.mypy.overrides]]
module = "omoide_sync.tests.*"
ignore_errors = true

[tool.coverage.run]
omit = [
    "./extras/*",
    ".venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if name == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]
